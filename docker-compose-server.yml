services:
  flask: &flask
    build:
      context: .
      dockerfile: Dockerfile-flask
      args:
        FLASK_PROCESS_USER: ${FLASK_PROCESS_USER}
        FLASK_PROCESS_USER_ID: ${FLASK_PROCESS_USER_ID}
        FLASK_PROCESS_GROUP_ID: ${FLASK_PROCESS_GROUP_ID}
    container_name: spun-flask
    depends_on:
      - db  
    environment:
      - PORT=56733
    expose:
      - 56733      
    volumes:
      - .:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS_PATH}:/google_auth_file/key_file.json
    env_file:
      - .env
    user: "1000:1000"
    networks:
      - flask      

  celery-worker:
    container_name: spun-celery-worker  # Unique name for the Celery worker container
    build:
      context: .
      dockerfile: Dockerfile-flask
      args:
        FLASK_PROCESS_USER: ${FLASK_PROCESS_USER}
        FLASK_PROCESS_USER_ID: ${FLASK_PROCESS_USER_ID}
        FLASK_PROCESS_GROUP_ID: ${FLASK_PROCESS_GROUP_ID}
    depends_on:
      - db
      - redis
    expose:
      - 56734
    ports:
      - "5001:5001"  # Example port mapping for Celery worker
    volumes:
      - .:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS_PATH}:/google_auth_file/key_file.json
    env_file:
      - .env
    environment:
      - PORT=56734
    networks:
      - flask
    user: "1000:1000"
    entrypoint: celery -A app.celery worker --loglevel=info  # Celery worker command
    

  nginx:
    image: nginx:alpine
    build:
      context: .
      dockerfile: Dockerfile-nginx
    container_name: spun-flask-nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443      
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs
    networks:
      - flask

  db:
    build:
      context: .
      dockerfile: Dockerfile-mysql
    volumes:
      - ./mysql:/var/lib/mysql    
    environment:
      - flask
    env_file:
      - .env
    networks:
      - flask          
    restart: unless-stopped

  redis:
    image: "redis:latest"
    volumes:
      - ./config/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - flask
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
      
networks:
  default:
    name: default_network
  flask:
    driver: bridge
